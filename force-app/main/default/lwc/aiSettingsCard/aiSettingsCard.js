import { LightningElement, track } from 'lwc';

export default class AiSettingsCard extends LightningElement {
    @track aiSuggestionsEnabled = false;
    @track autoGenerateDescriptions = false;
    @track aiEstimationEnabled = false;
    @track hasOpenAIKey = false;

    get showOpenAIWarning() {
        return !this.hasOpenAIKey;
    }

    get isAutoDescriptionsDisabled() {
        return !this.aiSuggestionsEnabled || !this.hasOpenAIKey;
    }

    get isAiEstimationDisabled() {
        return !this.aiSuggestionsEnabled || !this.hasOpenAIKey;
    }

    get autoDescriptionsChecked() {
        return this.autoGenerateDescriptions && this.aiSuggestionsEnabled;
    }

    get aiEstimationChecked() {
        return this.aiEstimationEnabled && this.aiSuggestionsEnabled;
    }

    handleAISuggestionsChange(event) {
        this.aiSuggestionsEnabled = event.target.checked;
        this.saveSettings();
    }

    handleAutoDescriptionsChange(event) {
        this.autoGenerateDescriptions = event.target.checked;
        this.saveSettings();
    }

    handleAIEstimationChange(event) {
        this.aiEstimationEnabled = event.target.checked;
        this.saveSettings();
    }

    saveSettings() {
        // Implementation to save AI settings to Salesforce
        console.log('Saving AI settings:', {
            aiSuggestionsEnabled: this.aiSuggestionsEnabled,
            autoGenerateDescriptions: this.autoGenerateDescriptions,
            aiEstimationEnabled: this.aiEstimationEnabled
        });
    }

    connectedCallback() {
        this.loadSettings();
        this.checkOpenAIKey();
    }

    loadSettings() {
        // Implementation to load AI settings from Salesforce
        console.log('Loading AI settings...');
    }

    checkOpenAIKey() {
        // Implementation to check if OpenAI key is configured
        // This would typically call an Apex method
        console.log('Checking OpenAI key status...');
    }
}